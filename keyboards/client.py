from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import types
from aiogram.filters.callback_data import CallbackData

from database.core import db


# Callback Data Factory –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
class SearchPagination(CallbackData, prefix="search"):
    page: int

    # –≠—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä –±—É–¥–µ—Ç = normal –≤ —Å–ª—É—á–∞–µ –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö –∫–Ω–∏–≥
    # –ò –±—É–¥–µ—Ç —Ä–∞–≤–µ–Ω –Ω–∞–∑–≤–∞–Ω–∏—é –∂–∞–Ω—Ä–∞ –≤ —Å–ª—É—á–∞–µ –ø–æ–∏—Å–∫–∞ –ø–æ –∂–∞–Ω—Ä–∞–º
    search_type: str


# –ù—É–∂–µ–Ω –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–∏–≥—É.
# –ß—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–∞ –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞
class BookSearch(CallbackData, prefix="output"):
    action: str
    page: int
    search_type: str

    rowid: str


class ClientKeyboards:

    async def start_keyboard():
        ikb = InlineKeyboardBuilder()

        ikb.button(text="üìñ–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É", callback_data="add_book")
        ikb.button(text="üìö–°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥", callback_data="books_list")
        ikb.button(text="üîé–ü–æ–∏—Å–∫ –∫–Ω–∏–≥", callback_data="search_book")

        ikb.adjust(1)

        return ikb.as_markup()

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∂–∞–Ω—Ä–æ–≤
    async def styles_keyboard():
        # –ü–æ–ª—É—á–∞–µ–º –∂–∞–Ω—Ä—ã –∏–∑ –±–¥ –∏ —Å–æ–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É - i[0] –ù–∞–∑–≤–∞–Ω–∏–µ –∂–∞–Ω—Ä–∞ - i[1] —Å—Ç—Ä–æ–∫–∞ –¥–ª—è callback_data
        styles = await db.get_styles()
        keyboard = [types.InlineKeyboardButton(
            text=i[0], callback_data=i[1]) for i in styles]

        # –î–µ–ª–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –ø–æ 2 —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è [[–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞],
        #                                                                           [–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞]]
        keyboard = [keyboard[i:i+2] for i in range(0, len(keyboard), 2)]

        return types.InlineKeyboardMarkup(inline_keyboard=keyboard)

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–∏—Å–∫–∞
    async def search_keyboard():
        ikb = InlineKeyboardBuilder()

        ikb.button(text="–í—Å–µ –∫–Ω–∏–≥–∏", callback_data="all_books")
        ikb.button(text="–ü–æ –∂–∞–Ω—Ä—É", callback_data="by_style")
        ikb.button(text="–ù–∞–∑–∞–¥‚ùå", callback_data="back")

        return ikb.adjust(1).as_markup()

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –¥–ª—è –≤—ã–≤–æ–¥–∞–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    async def search_pagination(books, page, search_type):
        second_page = ""

        # –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É –Ω–∞—Å –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–ª–æ
        # –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–∏—Å–∫–∞(–ø–æ –∂–∞–Ω—Ä—É, –∏–ª–∏ –≤—Å–µ–º –∫–Ω–∏–≥–∞–º
        # –í —Å–ª—É—á–∞–µ –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É search_type –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å byRequest
        if not search_type.startswith("byRequest"):
            back_text = "back_search"
        else:
            back_text = "back"

        ikb = InlineKeyboardBuilder()

        # –ù–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è 9 –∫–Ω–∏–≥
        if len(books) > 0:
            if page > 1:

                # –î–µ–ª–∞–µ–º —Å—Ä–µ–∑ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å
                # –ë—É–¥—É—Ç –ª–∏ —Ç–∞–º —ç–ª–µ–º–µ–Ω—Ç—ã
                second_page = books[(page)*9:(page+1)*9]

                # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–∏.
                # 2 —Å—Ç—Ä–∞–Ω–∏—Ü–∞ = –ø–µ—Ä–≤—ã–µ 9 –∫–Ω–∏–≥ —É–∂–µ –æ—Ç–æ–±—Ä–∞–∑–∏–ª–∏—Å—å.
                # –ü–æ –∏—Ç–æ–≥—É –∏ –ø–æ–ª—É—á–∞–µ–º page - 1 * 9 = 2 - 1 * 9 = 9.
                # –ò –¥–µ–ª–∞–µ–º —Å—Ä–µ–∑ —Å 9:18
                books = books[(page-1)*9:(page)*9]

            else:
                second_page = books[9:18]
                books = books[:9]

            print(books)

            for i in books:
                # callback_data == book rowid
                ikb.button(text=f"{i[1]} {i[2]}", callback_data=BookSearch(
                    page=page, search_type=search_type, rowid=str(i[0]), action="output").pack())

            ikb.adjust(1)

        keyboard = ikb.export()

        last_buttons = []

        if page > 1:
            last_buttons.append(types.InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=SearchPagination(
                page=page-1, action="prev", search_type=search_type).pack()))

        if len(second_page) > 0:
            last_buttons.append(types.InlineKeyboardButton(text="‚û°Ô∏è", callback_data=SearchPagination(
                page=page+1, action="next", search_type=search_type).pack()))

        keyboard.append(last_buttons)
        keyboard.append([types.InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥‚ùå", callback_data=back_text)])

        return types.InlineKeyboardMarkup(inline_keyboard=keyboard)

    async def back_keyboard():
        ikb = InlineKeyboardBuilder()

        ikb.button(text="–ù–∞–∑–∞–¥‚ùå", callback_data="back")

        return ikb.as_markup()

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é –∫–Ω–∏–≥—É
    async def searched_keyboard(page, search_type, rowid):
        ikb = InlineKeyboardBuilder()

        ikb.button(text="–£–¥–∞–ª–∏—Ç—å", callback_data=BookSearch(
            page=page, search_type=search_type, rowid=rowid, action="delete").pack())
        ikb.button(text="–ù–∞–∑–∞–¥‚ùå", callback_data=BookSearch(
            page=page, search_type=search_type, rowid=rowid, action="back").pack())

        return ikb.as_markup()

    # –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏
    async def cancel_keyboard():

        return types.ReplyKeyboardMarkup(keyboard=[
            [types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
        ],
            resize_keyboard=True,
            one_time_keyboard=True)

    # async def request_search_keybboard(rowid, text):
    #     return types.InlineKeyboardMarkup(inline_keyboard=[
    #         [types.InlineKeyboardButton(text=text, callback_data=BookSearch(
    #             page=0, search_type="search_type", rowid=str(rowid), action="request_search"))]
    #     ])
